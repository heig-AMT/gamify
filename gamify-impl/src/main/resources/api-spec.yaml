openapi: '3.0.3'
info:
  version: '0.1.0'
  title: Gamify API
  description: An API that manages application-specific events, and lets you define rules to find user scores.
  
tags:
- name: users
  description: Everything about users
- name: end users
  description: To be defined more clearly
- name: categories
  description: Everything about categories
- name: badges
  description: Everything about badges
- name: rules
  description: Everything about rules
- name: events
  description: Everything about events
- name: aggregates
  description: Everything about aggregates
  
security:
  #  - bearerAuth: []
  - apiKeyAuth: [ ]
paths:
  # users
  /register:
    post:
      tags:
      - users
      description: register a new user
      operationId: registerUser
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/UserCredentials'
      responses:
        '201':
          description: success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/AuthenticationSuccess'
        '403':
          description: forbidden

    put:
      tags:
      - users
      description: update a user
      operationId: updateUser
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/UserCredentials'
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/AuthenticationSuccess'
        '403':
          description: forbidden

    delete:
      tags:
      - users
      description: delete a user
      operationId: deleteUser
      responses:
        '204':
          description: success
        '403':
          description: forbidden
  
  # end users
  
  # categories
  /categories:
    post:
      tags:
      - categories
      description: register a new category
      operationId: registerCategory
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/UserCredentials'
      responses:
        '201':
          description: success
        '403':
          description: forbidden

    get:
      tags:
      - categories
      description: get all the categories
      operationId: getCategories
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'

  /categories/{categoryName}:
    parameters:
          - name: categoryName
            in: path
            description: name of the category
            required: true
            schema:
              type: string

    put:
      tags:
      - categories
      description: update a category
      operationId: updateCategory
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '204':
          description: success
        '403':
          description: forbidden
    delete:
      tags:
      - categories
      description: delete a category
      operationId: deleteCategory
      responses:
        '204':
          description: success
        '403':
          description: forbidden

  # badges
  /badges:
    post:
      tags:
      - badges
      description: register a new badge
      operationId: registerBadge
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Badge'
      responses:
        '204':
          description: success
        '403':
          description: forbidden

    get:
      tags:
      - badges
      description: get all the badges
      operationId: getBadges
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Badge'

  /badges/{badgeName}:
    parameters:
          - name: badgeName
            in: path
            description: name of the badge
            required: true
            schema:
              type: string
    put:
      tags:
      - badges
      description: update a badge
      operationId: updateBadge
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Badge'
      responses:
        '204':
          description: success
        '403':
          description: forbidden

    delete:
      tags:
      - badges
      description: delete a badge
      operationId: deleteBadge
      responses:
        '204':
          description: success
        '403':
          description: forbidden
  # rules
  /rules:
    post:
      tags:
      - rules
      description: register a new rule
      operationId: registerRule
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Rule'
      responses:
        '204':
          description: success
        '403':
          description: forbidden

    get:
      tags:
      - rules
      description: get all the rules
      operationId: getRules
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rule'

  /rules/{ruleName}:
    parameters:
          - name: ruleName
            in: path
            description: name of the rule
            required: true
            schema:
              type: string
    put:
      tags:
      - rules
      description: update a rule
      operationId: updateRule
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Rule'
      responses:
        '204':
          description: success
        '403':
          description: forbidden

    delete:
      tags:
      - rules
      description: delete a rule
      operationId: deleteRule
      responses:
        '204':
          description: success
        '403':
          description: forbidden

  # events
  /events:
    post:
      tags:
      - events
      description: post a user defined event
      operationId: addEvent
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '201':
          description: created
    get:
      tags:
      - events
      description: get all the events
      operationId: getEvents
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'

  /aggregates/categories/{categoryName}:
    parameters:
      - name: categoryName
        in: path
        description: name of the category
        required: true
        schema:
          type: string
    get:
      tags:
      - aggregates
      description: get the global leaderboard for a category
      operationId: getLeaderboard
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserAggregate'

  /aggregates/endusers/{endUserId}:
    parameters:
        - name: endUserId
          in: path
          description: id of the end user
          required: true
          schema:
            type: string
    get:
      tags:
      - aggregates
      description: get a specific end user aggregate
      operationId: getEndUserAggregate
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/UserAggregate'

components:
  securitySchemes:
    #    bearerAuth:            # arbitrary name for the security scheme
    #      type: http
    #      scheme: bearer       # warning: it HAS TO be a lowercase b for the swagger ui version used in springfox
    #      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
    apiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
      
  schemas:
    User:
      type: object
      properties:
        userId:
          type: string
          
    EndUser:
      type: object
      properties:
        endUserId:
          type: string
          
    Category:
      type: object
      properties:
        title: 
          type: string
        description:
          type: string
        name:
          type: string
          
    Badge:
      type: object
      properties:
        category:
          type: string
        pointsLower:
          type: integer
        pointsUpper:
          type: integer
          nullable: true

    # An Event is specific to each user of our API.
    Event:
      type: object
      properties:
        name:
          type: string
        endUserId:
          type: string
        timestamp:
          type: string
          format: Unix Epoch

    Rule:
      type: object
      properties:
        event:
          type: string
        points:
          type: integer
        category:
          type: string
          
    UserAggregate:
      type: object
      properties:
        endUser:
          $ref: '#/components/schemas/EndUser'
        points:
          type: integer
        rank:
          type: integer

    # A registration is a piece of data used to identify an application.
    UserCredentials:
      type: object
      properties:
        userName:
          type: string
        password:
          type: string

    AuthenticationSuccess:
      type: object
      properties:
        token:
          type: string
